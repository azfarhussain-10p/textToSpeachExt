{
  "env": {
    "NODE_ENV": "development",
    "EXTENSION_ENV": "development"
  },
  "includeCoAuthoredBy": true,
  "permissions": {
    "allow": [
      "Bash(grep:*)",
      "Bash(ls:*)",
      "Bash(source:*)",
      "Bash(find:*)",
      "Bash(mv:*)",
      "Bash(mkdir:*)",
      "Bash(tree:*)",
      "Bash(touch:*)",
      "Bash(chmod:*)",
      "Bash(cat:*)",
      "Bash(cp:*)",
      "Bash(rm:*)",
      "WebFetch(domain:*)",
      "Bash(gh issue view:*)",
      "Bash(gh pr create:*)",
      "Bash(gh pr view:*)",
      "WebFetch(domain:docs.anthropic.com)",
      "WebFetch(domain:developer.chrome.com)",
      "WebFetch(domain:developer.mozilla.org)",
      "WebFetch(domain:developer.apple.com)",
      "mcp__serena",
      "mcp__archon",
      "Bash(claude --version)",
      "Bash(node:*)",
      "Bash(npm:*)",
      "Bash(yarn:*)",
      "Bash(pnpm:*)",
      "Bash(npx:*)",
      "Bash(webpack:*)",
      "Bash(vite:*)",
      "Bash(jest:*)",
      "Bash(playwright:*)",
      "Bash(eslint:*)",
      "Bash(prettier:*)",
      "Bash(web-ext:*)",
      "Bash(chrome:*)",
      "Bash(firefox:*)",
      "Bash(git:*)",
      "Bash(zip:*)",
      "Bash(unzip:*)",
      "Bash(echo $SHELL)",
      "Bash(dos2unix:*)",
      "Bash(sudo apt:*)",
      "Bash(sudo apt install:*)",
      "Bash(claude --dangerously-skip-permissions)",
      "Bash(for:*)",
      "Bash(do sed -i 's/\\r$//' \"$file\")",
      "Bash(done)",
      "Bash(./test_validation_config.sh:*)",
      "Bash(./test_package_verify.sh:*)",
      "Bash(./package-json-verify.sh:*)",
      "Bash(bash:*)",
      "Bash(./.claude/commands/package-json-verify.sh:*)",
      "mcp__context__get-library-docs",
      "mcp__context__resolve-library-id",
      "Bash(python3:*)",
      "Bash(./create-icons.sh:*)",
      "Bash(do echo \"Fixing line endings in: $file\")",
      "Bash(sed:*)"
    ],
    "deny": [
      "Bash(rm -rf /)",
      "Bash(rm -rf ~)",
      "Bash(*rm -rf*node_modules*)",
      "Bash(*eval*)",
      "Bash(*curl*|*sh*)"
    ],
    "defaultMode": "acceptEdits",
    "additionalDirectories": [
      "/mnt/d/OfficialStuff/10Pearls/POC/AI"
    ]
  },
  "hooks": {
    "PostToolUse": [
      {
        "matcher": "Edit|Write|MultiEdit",
        "hooks": [
          {
            "type": "command",
            "command": ".claude/hooks/tts-extension-hooks.sh"
          },
          {
            "type": "command",
            "command": ".claude/hooks/manifest-validator.sh"
          },
          {
            "type": "command",
            "command": ".claude/hooks/ai-service-validator.sh"
          },
          {
            "type": "command",
            "command": ".claude/hooks/cross-browser-checker.sh"
          }
        ]
      }
    ],
    "PreToolUse": [
      {
        "matcher": "Bash",
        "hooks": [
          {
            "type": "command",
            "command": "bash -c 'input=$(cat); cmd=$(echo \"$input\" | jq -r \".tool_input.command // empty\"); if [[ \"$cmd\" =~ (rm|delete).*(\\*|\\.env|credentials|secret|api.*key) ]]; then echo \"{\\\"action\\\": \\\"block\\\", \\\"message\\\": \\\"🚨 Dangerous command blocked: $cmd - API keys and secrets must be protected\\\"}\"; else echo \"{}\"; fi'"
          }
        ]
      },
      {
        "matcher": "Edit|Write",
        "hooks": [
          {
            "type": "command",
            "command": "bash -c 'input=$(cat); file=$(echo \"$input\" | jq -r \".tool_input.file_path // empty\"); if [[ \"$file\" == *\"manifest.json\"* ]]; then echo \"{\\\"action\\\": \\\"info\\\", \\\"message\\\": \\\"📋 Editing manifest.json - Remember: Manifest V3 is required for Chrome Web Store\\\"}\"; fi; echo \"{}\"'"
          }
        ]
      }
    ],
    "SubagentStop": [
      {
        "hooks": [
          {
            "type": "command",
            "command": "bash -c 'input=$(cat); agent=$(echo \"$input\" | jq -r \".subagent_name // empty\"); if [[ \"$agent\" == \"validation-gates\" ]]; then echo \"✅ Validation gates completed for TTS extension. Check logs at .claude/logs/\" >&2; fi; echo \"{}\"'"
          },
          {
            "type": "command",
            "command": "bash -c 'input=$(cat); agent=$(echo \"$input\" | jq -r \".subagent_name // empty\"); if [[ \"$agent\" == \"documentation-manager\" ]]; then echo \"📚 Documentation updated. Remember to update README.md with any new TTS features\" >&2; fi; echo \"{}\"'"
          }
        ]
      }
    ],
    "UserPromptSubmit": [
      {
        "hooks": [
          {
            "type": "command",
            "command": "bash -c 'input=$(cat); prompt=$(echo \"$input\" | jq -r \".prompt // empty\"); if [[ \"$prompt\" =~ (test|validate|check) ]] && [[ ! \"$prompt\" =~ (skip|no|without).*(test|validation) ]]; then echo \"🧪 TTS Testing Reminder: Use validation-gates subagent for comprehensive testing including:\" >&2; echo \"  • Cross-browser compatibility (Chrome, Firefox, Safari, Edge)\" >&2; echo \"  • Manifest V3 compliance\" >&2; echo \"  • TTS functionality (speechSynthesis API)\" >&2; echo \"  • AI service integration\" >&2; echo \"  • Memory usage (<50MB)\" >&2; fi; echo \"{}\"'"
          },
          {
            "type": "command",
            "command": "bash -c 'input=$(cat); prompt=$(echo \"$input\" | jq -r \".prompt // empty\"); if [[ \"$prompt\" =~ (tts|speech|voice|audio) ]]; then echo \"🎤 TTS Context: Remember to handle speechSynthesis API browser differences and implement proper error handling\" >&2; fi; echo \"{}\"'"
          },
          {
            "type": "command",
            "command": "bash -c 'input=$(cat); prompt=$(echo \"$input\" | jq -r \".prompt // empty\"); if [[ \"$prompt\" =~ (ai|groq|claude|openai|explanation) ]]; then echo \"🤖 AI Service Context: Groq (100 req/hr free), Claude (60 req/min), OpenAI (60 req/min). Implement rate limiting!\" >&2; fi; echo \"{}\"'"
          }
        ]
      }
    ],
    "SessionStart": [
      {
        "hooks": [
          {
            "type": "command",
            "command": "bash -c 'echo \"🔊 TTS Extension Development Session Started\" >&2; echo \"📋 Project: Text-to-Speech Browser Extension\" >&2; echo \"🎯 Target Browsers: Chrome 88+, Firefox 78+, Safari 14+, Edge 88+\" >&2; echo \"🤖 AI Services: Groq (primary), Claude (secondary), OpenAI (tertiary)\" >&2; echo \"📚 Docs: Check CLAUDE.md and README.md for implementation patterns\" >&2; echo \"{}\"'"
          }
        ]
      }
    ],
    "Stop": [
      {
        "hooks": [
          {
            "type": "command",
            "command": "bash -c 'echo \"🏁 Session Complete. Remember to:\" >&2; echo \"  • Run tests: npm test\" >&2; echo \"  • Check bundle size: npm run analyze\" >&2; echo \"  • Validate manifest: npm run validate:manifest\" >&2; echo \"  • Test cross-browser: npm run test:e2e:all\" >&2; echo \"{}\"'"
          }
        ]
      }
    ]
  },
  "statusLine": {
    "type": "command",
    "command": "input=$(cat); current_dir=$(echo \"$input\" | jq -r '.workspace.current_dir'); project_name=$(basename \"$current_dir\"); model=$(echo \"$input\" | jq -r '.model.display_name'); branch=$(cd \"$current_dir\" 2>/dev/null && git branch --show-current 2>/dev/null || echo 'no-git'); node_version=$(node --version 2>/dev/null || echo 'no-node'); printf \"\\033[36m🔧 TTS Extension\\033[0m \\033[2m│\\033[0m \\033[33m$project_name\\033[0m \\033[2m│\\033[0m \\033[32m$branch\\033[0m \\033[2m│\\033[0m \\033[35m$node_version\\033[0m \\033[2m│\\033[0m \\033[34m$model\\033[0m\""
  }
}